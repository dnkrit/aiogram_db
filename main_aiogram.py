import asyncio
import os
import random
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, FSInputFile
from config import TOKEN, WEATHER_API_KEY
from gtts import gTTS
from googletrans import Translator
import aiohttp

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –Ω—É–∂–Ω—ã–µ –ø–∞–ø–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
os.makedirs("tmp", exist_ok=True)
os.makedirs("img", exist_ok=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def start(message: Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç–∏–∫–∏, {message.from_user.full_name}!")

# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message(Command("help"))
async def help(message: Message):
    await message.answer("–Ø —É–º–µ—é: /start, /help, /photo, /video, /audio, /training, /voice, /doc")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ "–ß—Ç–æ —Ç–∞–∫–æ–µ –ò–ò?"
@dp.message(F.text == "–ß—Ç–æ —Ç–∞–∫–æ–µ –ò–ò?")
async def aitext(message: Message):
    await message.answer("–ò–ò ‚Äî —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç. –Ø –µ–≥–æ –ø—Ä–∏–º–µ—Ä üòä")

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–æ—Ç–æ –ø–æ /photo
@dp.message(Command("photo"))
async def send_photo(message: Message):
    images = [
        'https://news-img.gismeteo.st/ru/2021/01/shutterstock_1390386575-768x512.jpg',
        'https://cdn1.ozone.ru/s3/multimedia-1-9/c600/6917064525.jpg'
    ]
    await message.answer_photo(photo=random.choice(images), caption="–í–æ—Ç —Ç–µ–±–µ –∫–∞—Ä—Ç–∏–Ω–∫–∞!")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã
@dp.message(Command("weather"))
async def get_weather(message: Message):
    city = "Moscow"
    url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            if resp.status == 200:
                data = await resp.json()
                await message.answer(f"–ü–æ–≥–æ–¥–∞ –≤ {city}: {data['main']['temp']}¬∞C, {data['weather'][0]['description']}")
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ
@dp.message(F.photo)
async def save_photo(message: Message):
    file_id = message.photo[-1].file_id
    await bot.download(message.photo[-1], destination=f'img/{file_id}.jpg')
    await message.answer("–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")


# –ö–æ–º–∞–Ω–¥–∞ /video
@dp.message(Command("video"))
async def video(message: Message):
    import os
    from aiogram.types import FSInputFile

    # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
    path = os.path.abspath("video.mp4")

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    print(f"[DEBUG] –¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print(f"[DEBUG] –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ: {path}")
    print(f"[DEBUG] –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç? {os.path.exists(path)}")

    if not os.path.exists(path):
        await message.answer("‚ùå –§–∞–π–ª video.mp4 –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        await bot.send_chat_action(message.chat.id, "upload_video")
        video = FSInputFile(path)
        await bot.send_video(message.chat.id, video)
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")


# –ö–æ–º–∞–Ω–¥–∞ /audio
async def audio(message: Message):
    await bot.send_chat_action(message.chat.id, "upload_audio")
    audio = FSInputFile("sound2.mp3")
    await bot.send_audio(message.chat.id, audio)

# –ö–æ–º–∞–Ω–¥–∞ /training (–æ–∑–≤—É—á–∫–∞)
@dp.message(Command("training"))
async def training(message: Message):
    training_list = [
        "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 1: –°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è, –í–µ–ª–æ—Å–∏–ø–µ–¥, –ü–ª–∞–Ω–∫–∞.",
        "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 2: –ü–æ–¥—ä–µ–º—ã –Ω–æ–≥, –†—É—Å—Å–∫–∏–π —Ç–≤–∏—Å—Ç, –ü–ª–∞–Ω–∫–∞ —Å –ø–æ–¥–Ω—è—Ç–æ–π –Ω–æ–≥–æ–π.",
        "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 3: –ù–æ–∂–Ω–∏—Ü—ã, –ë–æ–∫–æ–≤–∞—è –ø–ª–∞–Ω–∫–∞, –°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è."
    ]
    rand_tr = random.choice(training_list)
    await message.answer(f"–≠—Ç–æ –≤–∞—à–∞ –º–∏–Ω–∏-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n{rand_tr}")

    tts = gTTS(text=rand_tr, lang='ru')
    tts.save("training.ogg")
    voice = FSInputFile("training.ogg")
    await bot.send_voice(chat_id=message.chat.id, voice=voice)
    os.remove("training.ogg")

# –ö–æ–º–∞–Ω–¥–∞ /voice ‚Äî –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é
@dp.message(Command("voice"))
async def voice(message: Message):
    voice = FSInputFile("sample.ogg")
    await message.answer_voice(voice)

# –ö–æ–º–∞–Ω–¥–∞ /doc ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
@dp.message(Command("doc"))
async def doc(message: Message):
    doc = FSInputFile("TG02.pdf")
    await bot.send_document(message.chat.id, doc)

# –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
@dp.message()
async def text_handler(message: Message):
    if message.text.lower() == "test":
        await message.answer("–¢–µ—Å—Ç–∏—Ä—É–µ–º")
    else:
        translator = Translator()
        translated = translator.translate(message.text, dest='en')
        await message.answer(f"–ü–µ—Ä–µ–≤–æ–¥: {translated.text}")

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
